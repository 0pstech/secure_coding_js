import Document, {
    Html,
    Head,
    Main,
    NextScript,
    DocumentContext,
    DocumentInitialProps
} from 'next/document';
import crypto from 'crypto';
import React from 'react';

interface MyDocumentProps {
    nonce: string;
}

export default class MyDocument extends Document<MyDocumentProps> {
    static async getInitialProps(
      ctx: DocumentContext
    ): Promise<DocumentInitialProps & MyDocumentProps> {
      const nonce = crypto.randomBytes(16).toString('base64');
      const initialProps = await Document.getInitialProps(ctx);
      return { ...initialProps, nonce };
    }
  
    render() {
      const { nonce } = this.props;
      const isDev = process.env.NODE_ENV === 'development';
  
      const cspDirectives = [
        `default-src 'self'`,
        `script-src 'self' 'nonce-${nonce}'${isDev ? " 'unsafe-eval'" : ''}`,
        `style-src 'self' 'unsafe-inline'`,
        `img-src 'self' data:`,
        `connect-src 'self' http://192.168.1.82:5173 ws://192.168.1.82:5173 http://localhost:3000`,
        `object-src 'none'`,
        `base-uri 'self'`,
      ];
      const csp = cspDirectives.join('; ');
  
      return (
        <Html>
          <Head>
            <meta httpEquiv="Content-Security-Policy" content={csp} />
          </Head>
          <body>
            <Main />
            <NextScript nonce={nonce} />
          </body>
        </Html>
      );
    }
  }
  